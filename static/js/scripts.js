document.addEventListener('DOMContentLoaded', () => {
    console.log('JavaScript is initialized and working!');

    const registerForm = document.getElementById('registerForm'); // Get the registration form
    const loginForm = document.getElementById('loginForm'); // Get the login form
    const uploadForm = document.getElementById('uploadForm'); // Get the upload form
    const uploadedFilesSection = document.getElementById('uploadedFilesSection'); // Section to show uploaded files

    // Helper function to show alerts
    const showAlert = (message, type = 'info') => {
        if (type === 'info') {
            console.log(`[INFO] ${message}`);
        } else if (type === 'success') {
            console.log(`[SUCCESS] ${message}`);
        } else if (type === 'error') {
            console.error(`[ERROR] ${message}`);
        } else if (type === 'warning') {
            console.warn(`[WARNING] ${message}`);
        }
        alert(`[${type.toUpperCase()}] ${message}`);
    };

    // Register Form Submission
    if (registerForm) {
        console.log('Register form detected.');
        registerForm.addEventListener('submit', function (event) {
            event.preventDefault();  // Prevent the default form submission
            console.log('Register form submitted.');

            // Form data validation (ensure fields are filled)
            const name = registerForm.querySelector('input[name="name"]').value;
            const email = registerForm.querySelector('input[name="email"]').value;
            const password = registerForm.querySelector('input[name="password"]').value;
            const role = registerForm.querySelector('select[name="role"]').value;

            console.log('[DEBUG] Register form values:', { name, email, password, role });

            if (!name || !email || !password || !role) {
                console.warn('Register form submission failed: Missing required fields.');
                showAlert('All fields are required.', 'error');
                return;
            }

            // Create a FormData object from the form
            const formData = new FormData(registerForm);

            console.log('Sending registration data to the server...');
            // Send the form data to the server using fetch
            fetch('/register', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                console.log('Received server response for registration.');
                return response.json(); // Parse the response as JSON
            })
            .then(data => {
                console.log('[DEBUG] Server registration response:', data);
                if (data.message) {
                    console.log('Registration successful:', data.message);
                    showAlert(data.message, 'success');  // Show success message
                    window.location.href = '/login';  // Redirect to login page
                } else if (data.error) {
                    console.error('Registration failed:', data.error);
                    showAlert(data.error, 'error');  // Show error message
                }
            })
            .catch(error => {
                console.error('[ERROR] An unexpected error occurred during registration:', error);
                showAlert('An unexpected error occurred during registration.', 'error');
            });
        });
    } else {
        console.warn('Register form not detected on this page.');
    }

    // Login Form Submission
    if (loginForm) {
        console.log('Login form detected.');
        loginForm.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent default form submission
            console.log('Login form submitted.');
        
            // Extract form values
            const email = loginForm.querySelector('input[name="email"]').value;
            const password = loginForm.querySelector('input[name="password"]').value;
            const role = loginForm.querySelector('select[name="role"]').value;
        
            console.log('[DEBUG] Login form values:', { email, password, role });
        
            if (!email || !password || !role) {
                console.warn('Login form submission failed: Missing required fields.');
                showAlert('Email, password, and role are required.', 'error');
                return;
            }
        
            // Create a FormData object
            const formData = new FormData(loginForm);
        
            console.log('Sending login data to the server...');
            fetch('/login', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
                console.log('[DEBUG] Server login response:', data);
                if (data.message) {
                    console.log('Login successful:', data.message);
                    showAlert(data.message, 'success');
                    window.location.href = '/dashboard';
                } else if (data.error) {
                    console.error('Login failed:', data.error);
                    if (data.error.includes('No registered user')) {
                        showAlert('No registered user found with those credentials.', 'error');
                    } else {
                        showAlert(data.error, 'error');
                    }
                }
            })
            .catch(error => {
                console.error('[ERROR] An unexpected error occurred during login:', error);
                showAlert('An unexpected error occurred during login.', 'error');
            });
        });
    } else {
        console.warn('Login form not detected on this page.');
    }

    // Upload Form Submission
    if (uploadForm) {
        console.log('Upload form detected.');
        uploadForm.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent default form submission
            console.log('Upload form submitted.');

            const fileInput = uploadForm.querySelector('input[type="file"]');
            const file = fileInput.files[0]; // Get the selected file

            if (!file) {
                console.warn('No file selected for upload.');
                showAlert('No file selected for upload.', 'error');
                return;
            }

            const allowedExtensions = ['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'];
            const fileExtension = file.name.split('.').pop().toLowerCase();
            if (!allowedExtensions.includes(fileExtension)) {
                console.warn('Invalid file type selected.');
                showAlert('Invalid file type. Allowed types are txt, pdf, png, jpg, jpeg, gif.', 'error');
                return;
            }

            if (file.size > 1 * 1024 * 1024) { // 1 MB size limit
                console.warn('File size exceeds the 1MB limit.');
                showAlert('File size exceeds the 1MB limit.', 'error');
                return;
            }

            // Create a FormData object to send the file
            const formData = new FormData();
            formData.append('file', file);

            console.log('Sending file to the server...');
            fetch('/upload', {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                console.log('Received server response for upload.');
                if (!response.ok) {
                    throw new Error('Failed to upload file. Server responded with an error.');
                }
                return response.text();
            })
            .then(data => {
                console.log('[DEBUG] Server upload response:', data);
                showAlert('File uploaded successfully.', 'success');
                window.location.reload(); // Reload the page to show the uploaded files
            })
            .catch(error => {
                console.error('[ERROR] An unexpected error occurred during file upload:', error);
                showAlert('An unexpected error occurred during file upload.', 'error');
            });
        });
    } else {
        console.warn('Upload form not detected on this page.');
    }

    // Fetch and Display Uploaded Files
    if (uploadedFilesSection) {
        console.log('Fetching uploaded files...');
        fetch('/uploads')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch uploaded files. Server responded with an error.');
                }
                return response.json();
            })
            .then(data => {
                console.log('[DEBUG] Uploaded files fetched:', data);

                // Clear the section
                uploadedFilesSection.innerHTML = '';

                if (data.files && data.files.length > 0) {
                    data.files.forEach(file => {
                        const fileItem = document.createElement('div');
                        fileItem.classList.add('file-item');
                        fileItem.innerHTML = `
                            <p><strong>${file.filename}</strong> (${file.size} bytes)</p>
                            <p>Uploaded on: ${file.upload_date}</p>
                        `;
                        uploadedFilesSection.appendChild(fileItem);
                    });
                } else {
                    uploadedFilesSection.innerHTML = '<p>No files uploaded yet.</p>';
                }
            })
            .catch(error => {
                console.error('[ERROR] An unexpected error occurred while fetching uploaded files:', error);
                showAlert('An error occurred while fetching uploaded files.', 'error');
            });
    } else {
        console.warn('Uploaded files section not detected on this page.');
    }
});
