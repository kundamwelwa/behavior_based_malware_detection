import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import numpy as np

def load_data(file_path):
    """
    Load the dataset from the given file path.
    """
    try:
        data = pd.read_csv(file_path) 
        print("Data loaded successfully!")
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def handle_missing_values(data):
    """
    Handle missing values by either filling or dropping them.
    """
    data_cleaned = data.dropna()  
    print(f"Missing values handled. Remaining rows: {data_cleaned.shape[0]}")
    return data_cleaned

def scale_features(data):
    """
    Scale numerical features using StandardScaler.
    """
    numerical_cols = data.select_dtypes(include=[np.number]).columns
    scaler = StandardScaler()
    data[numerical_cols] = scaler.fit_transform(data[numerical_cols])
    print("Features scaled!")
    return data

def encode_features(data):
    """
    Encode categorical features using LabelEncoder.
    """
    categorical_cols = data.select_dtypes(include=['object']).columns
    le = LabelEncoder()
    
    for col in categorical_cols:
        data[col] = le.fit_transform(data[col])
        print(f"Encoded {col} successfully!")
    
    return data

def split_data(data, target_column, test_size=0.2, random_state=42):
    """
    Split the data into training and testing sets.
    """
    X = data.drop(columns=[target_column])
    y = data[target_column]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)
    print(f"Data split into training and testing sets. Training data shape: {X_train.shape}")
    return X_train, X_test, y_train, y_test

def preprocess_data(file_path, target_column):
    data = load_data(file_path)
    
    if data is not None:
        data = handle_missing_values(data)
        data = encode_features(data)
        data = scale_features(data)
        X_train, X_test, y_train, y_test = split_data(data, target_column)
        
        return X_train, X_test, y_train, y_test
    else:
        return None, None, None, None
