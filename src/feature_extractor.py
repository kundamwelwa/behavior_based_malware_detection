import pandas as pd
import numpy as np

# Function to extract basic statistical features
def extract_statistical_features(data):
    """
    Extract basic statistical features: mean, std, min, max, etc.
    """
    # Assuming 'data' is a DataFrame
    statistical_features = data.describe().transpose()
    statistical_features['range'] = statistical_features['max'] - statistical_features['min']
    statistical_features['skew'] = data.skew()  # Skewness of the data
    statistical_features['kurtosis'] = data.kurtosis()  # Kurtosis of the data
    print("Statistical features extracted!")
    
    return statistical_features

# Function to extract time-based features
def extract_time_based_features(data, time_column='timestamp'):
    """
    Extract time-based features, such as time of day, day of the week, etc.
    Assumes a column named 'timestamp' for time-based analysis.
    """
    data[time_column] = pd.to_datetime(data[time_column])
    data['hour'] = data[time_column].dt.hour
    data['day_of_week'] = data[time_column].dt.dayofweek
    data['month'] = data[time_column].dt.month
    print("Time-based features extracted!")
    
    return data

# Function to calculate moving averages (or other rolling statistics)
def extract_rolling_features(data, window=5):
    """
    Extract rolling statistics like moving average or rolling std.
    """
    rolling_features = data.rolling(window=window).agg(['mean', 'std', 'max', 'min'])
    rolling_features.columns = ['_'.join(col).strip() for col in rolling_features.columns.values]
    print(f"Rolling features with window {window} extracted!")
    
    return rolling_features

# Combine all feature extraction steps
def extract_features(data):
    """
    Extract all features: statistical, time-based, and rolling.
    """
    features = pd.DataFrame()
    
    # Extract statistical features
    stat_features = extract_statistical_features(data)
    features = pd.concat([features, stat_features], axis=1)
    
    # Assuming there is a 'timestamp' column for time-based features
    features = extract_time_based_features(data)
    
    # Extract rolling features (optional, you can adjust the window size)
    rolling_features = extract_rolling_features(data, window=5)
    features = pd.concat([features, rolling_features], axis=1)
    
    return features
