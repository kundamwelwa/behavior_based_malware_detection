from datetime import datetime, timedelta
import sqlite3
import logging

def suspend_user(admin_email, user_email, hours=3):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    # Get user_id based on email
    cursor.execute('''SELECT user_id, suspended_until FROM users WHERE email = ?''', (user_email,))
    user = cursor.fetchone()

    if not user:
        conn.close()
        return f"User with email {user_email} not found."

    user_id, current_suspended_until = user

    # If the user is already suspended and the suspension time hasn't expired, return early
    if current_suspended_until and datetime.now() < datetime.strptime(current_suspended_until, '%Y-%m-%d %H:%M:%S'):
        conn.close()
        return f"User {user_email} is already suspended until {current_suspended_until}."

    suspended_until = datetime.now() + timedelta(hours=hours)

    # Update suspended_until based on user email
    cursor.execute(''' 
    UPDATE users SET suspended_until = ? WHERE user_id = ?
    ''', (suspended_until, user_id))

    # Log the action in admin_actions table
    cursor.execute(''' 
    INSERT INTO admin_actions (admin_email, user_email, action_type, timestamp) 
    VALUES (?, ?, ?, ?)
    ''', (admin_email, user_email, 'suspend', datetime.now().isoformat()))

    conn.commit()
    conn.close()

    return f"User {user_email} suspended until {suspended_until}"

def block_user(admin_email, user_email):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    # Get user_id based on email
    cursor.execute('''SELECT user_id FROM users WHERE email = ?''', (user_email,))
    user = cursor.fetchone()

    if not user:
        conn.close()
        return f"User with email {user_email} not found."

    user_id = user[0]

    # Update the user's blocked status
    cursor.execute(''' 
    UPDATE users SET is_blocked = 1 WHERE user_id = ?
    ''', (user_id,))

    # Log the action in admin_actions table
    cursor.execute(''' 
    INSERT INTO admin_actions (admin_email, user_email, action_type, timestamp) 
    VALUES (?, ?, ?, ?)
    ''', (admin_email, user_email, 'block', datetime.now().isoformat()))

    conn.commit()
    conn.close()

    return f"User {user_email} has been blocked."

def unblock_user(admin_email: str, user_email: str):
    """
    Unblock a user, remove failed login attempt records, and log the action performed by the admin.

    Args:
        admin_email (str): The email of the admin performing the unblock action.
        user_email (str): The email of the user to be unblocked.

    Returns:
        str: A success or error message indicating the result of the operation.
    """
    try:
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        # Validate admin email
        cursor.execute('''SELECT user_id, role FROM users WHERE email = ?''', (admin_email,))
        admin = cursor.fetchone()
        if not admin or admin[1] != 'admin':  # Ensure the admin role is valid
            return f"Error: {admin_email} is not a valid admin account."

        # Get user_id based on user_email
        cursor.execute('''SELECT user_id FROM users WHERE email = ?''', (user_email,))
        user = cursor.fetchone()
        if not user:
            return f"Error: User with email {user_email} not found."

        user_id = user[0]

        # Update the user's blocked status
        cursor.execute(''' 
        UPDATE users SET is_blocked = 0, suspended_until = NULL WHERE user_id = ?
        ''', (user_id,))

        # Remove failed login attempts and any related logs in user_activity_logs
        cursor.execute(''' 
        DELETE FROM user_activity_logs WHERE email = ? AND attempt_type = 'login' AND success = 0
        ''', (user_email,))

        # Log the action in the admin_actions table
        cursor.execute(''' 
        INSERT INTO admin_actions (admin_email, user_email, action_type, timestamp) 
        VALUES (?, ?, ?, ?)
        ''', (admin_email, user_email, 'unblock', datetime.now().isoformat()))

        conn.commit()
        return f"Success: User {user_email} has been unblocked and their failed login attempts cleared."

    except sqlite3.Error as e:
        logging.error(f"Database error while unblocking user: {e}")
        return f"Error: Unable to unblock user {user_email}. Please try again later."

    finally:
        if conn:
            conn.close()

