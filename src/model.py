from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV
import joblib  # To save the trained model

def train_model(X_train, y_train, model_type='random_forest', params=None):
    """
    Train the machine learning model. Choose the model type from 'random_forest', 'svm', 'decision_tree'.
    """
    if model_type == 'random_forest':
        model = RandomForestClassifier(**(params if params else {}))
    elif model_type == 'svm':
        model = SVC(**(params if params else {}))
    elif model_type == 'decision_tree':
        model = DecisionTreeClassifier(**(params if params else {}))
    else:
        raise ValueError("Invalid model type. Choose from 'random_forest', 'svm', or 'decision_tree'.")
    
    model.fit(X_train, y_train)
    print(f"{model_type} model trained successfully!")
    
    return model

def evaluate_model(model, X_test, y_test):
    """
    Evaluate the trained model using test data and print evaluation metrics.
    """
    y_pred = model.predict(X_test)
    

    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

def tune_model(model, X_train, y_train, param_grid):
    """
    Tune the model using GridSearchCV to find the best hyperparameters.
    """
    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy')
    grid_search.fit(X_train, y_train)
    
    print("Best parameters found: ", grid_search.best_params_)
    
    return grid_search.best_estimator_

def save_model(model, filename='model.pkl'):
    """
    Save the trained model to a file for later use.
    """
    joblib.dump(model, filename)
    print(f"Model saved as {filename}")

def load_model(filename='model.pkl'):
    """
    Load the saved model from a file.
    """
    model = joblib.load(filename)
    print(f"Model loaded from {filename}")
    return model
